---
name: CI Pipeline Sample
on: [push, pull_request]
jobs:


  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        #python-version: [3.8, 3.9]
        python-version: [3.9]

    steps:
      - uses: actions/checkout@v2
        #with:
        #  path: molecule_demo
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt
      - name: Test with molecule
        run: |
          molecule test

  unit-test-linux:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2
      - name: Run unit tests
        env:
          VERBOSE: true
        run: |
          echo "init-1"
  build-linux:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 5
      - name: Show history for debug help
        run: |
          git log --oneline -n 5
      - name: Build binaries and images
        run: |
          #source ./scripts/build.sh
          echo 'x' > test.txt;
      - name: Save images to tar
        run: |
          #source ./scripts/build.sh
          mkdir build
          tar cfz build/test.tgz test.txt
      - name: Save artifacts
        uses: actions/upload-artifact@v2
        with:
          #name: build-linux-${{ github.run_id }}
          name: test.tgz
          path: |
            build
  stress-test-linux:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2
      - name: Run stress tests
        env:
          VERBOSE: true
        run: |
          #source ./scripts/build.sh; stress
          echo "Running stress test"

  vulnerability-scan-linux:
    runs-on: ubuntu-latest
    needs: [build, build-linux, unit-test-linux]
    steps:
      - name: Download binaries and prebuilt images
        uses: actions/download-artifact@v2
        with:
          #name: build-linux-${{ github.run_id }}
          name: test.tgz
          #path: build
      - name: Run vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          #input: build/linux/amd64/img-linux-amd64-${{ github.run_id }}.tar
          input: test.tgz
          format: 'table'
          exit-code: '1'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'

  push-images:
    if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    needs: [build, build-linux, unit-test-linux, stress-test-linux, vulnerability-scan-linux]
    steps:
      - uses: actions/checkout@v2
      - name: Download binaries and prebuilt images
        uses: actions/download-artifact@v2
        with:
          #name: build-linux-${{ github.run_id }}
          name: test.tgz
          #path: build
      #- name: Download binaries and prebuilt images
      #  uses: actions/download-artifact@v2
      #  with:
      #    name: build-windows-${{ github.run_id }}
      #    path: build
      - name: Load images and verify
        run: |
          docker image ls
      #- name: Login to Docker Hub
      #  uses: docker/login-action@v1
      #  with:
      #    username: ${{ secrets.DOCKERHUB_USER }}
      #    password: ${{ secrets.DOCKERHUB_TOKEN }}
      #- name: Push images
      #  env:
      #    DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
      #    DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      #  run: |
      #    source ./scripts/build.sh
      #    gen_manifest_and_push_all

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [push-images]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      #- name: Set up Go
      #  uses: actions/setup-go@v2
      #  with:
      #    go-version: 1.16
      #- name: Run GoReleaser
      #  uses: goreleaser/goreleaser-action@v2
      #  with:
      #    version: latest
      #    args: release --rm-dist
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
